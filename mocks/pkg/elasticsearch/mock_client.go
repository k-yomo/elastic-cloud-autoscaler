// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_elasticsearch is a generated GoMock package.
package mock_elasticsearch

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	elasticsearch "github.com/k-yomo/elastic-cloud-autoscaler/pkg/elasticsearch"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetIndexHealth mocks base method.
func (m *MockClient) GetIndexHealth(ctx context.Context, indexName string) (*elasticsearch.IndexHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexHealth", ctx, indexName)
	ret0, _ := ret[0].(*elasticsearch.IndexHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexHealth indicates an expected call of GetIndexHealth.
func (mr *MockClientMockRecorder) GetIndexHealth(ctx, indexName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexHealth", reflect.TypeOf((*MockClient)(nil).GetIndexHealth), ctx, indexName)
}

// GetIndexSettings mocks base method.
func (m *MockClient) GetIndexSettings(ctx context.Context, indexName string) (*elasticsearch.IndexSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexSettings", ctx, indexName)
	ret0, _ := ret[0].(*elasticsearch.IndexSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexSettings indicates an expected call of GetIndexSettings.
func (mr *MockClientMockRecorder) GetIndexSettings(ctx, indexName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexSettings", reflect.TypeOf((*MockClient)(nil).GetIndexSettings), ctx, indexName)
}

// GetNodeStats mocks base method.
func (m *MockClient) GetNodeStats(ctx context.Context) (*elasticsearch.NodeStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeStats", ctx)
	ret0, _ := ret[0].(*elasticsearch.NodeStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeStats indicates an expected call of GetNodeStats.
func (mr *MockClientMockRecorder) GetNodeStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeStats", reflect.TypeOf((*MockClient)(nil).GetNodeStats), ctx)
}

// UpdateIndexReplicaNum mocks base method.
func (m *MockClient) UpdateIndexReplicaNum(ctx context.Context, indexName string, replicaNum int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndexReplicaNum", ctx, indexName, replicaNum)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIndexReplicaNum indicates an expected call of UpdateIndexReplicaNum.
func (mr *MockClientMockRecorder) UpdateIndexReplicaNum(ctx, indexName, replicaNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexReplicaNum", reflect.TypeOf((*MockClient)(nil).UpdateIndexReplicaNum), ctx, indexName, replicaNum)
}
